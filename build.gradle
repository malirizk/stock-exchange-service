plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
    id 'java'
}

group = 'com.ing.stockexchange-service'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = '0.8.7'
}

ext {
    mapstructVersion = '1.5.1.Final'
    lombokMapstructBindingVersion = '0.2.0'
    javaxValidationVersion = '2.0.1.Final'
    commonsLang3Version = '3.12.0'
    springdocOpenapiUiVersion = '1.6.9'
    jjwtVersion = '0.9.1'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "io.jsonwebtoken:jjwt:${jjwtVersion}"
    implementation "org.springdoc:springdoc-openapi-ui:${springdocOpenapiUiVersion}"
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", 'org.projectlombok:lombok', "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    runtimeOnly 'com.h2database:h2'
    implementation "javax.validation:validation-api:${javaxValidationVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy(tasks.jacocoTestReport)
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/ing/stockexchangeservice/model/**",
                    "com/ing/stockexchangeservice/dto/**",
                    "com/ing/stockexchangeservice/mapper/**",
                    "com/ing/stockexchangeservice/exception/**",
                    "com/ing/stockexchangeservice/config/**"
            ])
        }))
    }
}

def profiles = 'dev'

bootRun {
    args = ["--spring.profiles.active=" + profiles]
}
